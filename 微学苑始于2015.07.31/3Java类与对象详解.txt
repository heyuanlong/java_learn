创建对象
对象是类的一个实例，创建对象的过程也叫类的实例化。对象是以类为模板来创建的。

在Java中，使用new关键字来创建对象，一般有以下三个步骤：
声明：声明一个对象，包括对象名称和对象类型。
实例化：使用关键字new来创建一个对象。
初始化：使用new创建对象时，会调用构造方法初始化对象。

例如：
Dog myDog;  // 声明一个对象
myDog = new Dog("花花", 3);  // 实例化


访问成员变量和方法
通过已创建的对象来访问成员变量和成员方法，例如：
// 实例化
Dog myDog = new Dog("花花", 3);
// 通过点号访问成员变量
myDog.name;
// 通过点号访问成员方法
myDog.bark();




Java支持四种不同的访问权限：（与C++不同）
修饰符	说明
public	共有的，对所有类可见。
protected	受保护的，对同一包内的类和所有子类可见。
private	私有的，在同一类内可见。
默认的	在同一包内可见。默认不使用任何修饰符。


在Java中，变量的作用域分为四个级别：类级、对象实例级、方法级、块级。
public class Demo{
    public static String name = "微学苑";  // 类级变量
    public int i; // 对象实例级变量

    // 属性块，在类初始化属性时候运行
    {
        int j = 2;// 块级变量
    }

    public void test1() {
        int j = 3;  // 方法级变量
        if(j == 3) {
            int k = 5;  // 块级变量
        }
        // 这里不能访问块级变量，块级变量只能在块内部访问
        System.out.println("name=" + name + ", i=" + i + ", j=" + j);
    }

    public static void main(String[] args) {
        // 不创建对象，直接通过类名访问类级变量
        System.out.println(Demo.name);
       
        // 创建对象并访问它的方法
        Demo t = new Demo();
        t.test1();
    }
}



this 关键字用来表示当前对象本身
使用this区分同名变量
成员变量与方法内部的变量重名时，希望在方法内部调用成员变量，怎么办呢？这时候只能使用this

匿名对象就是没有名字的对象。如果对象只使用一次，就可以作为匿名对象，代码中 new B(this).print(); 等价于 ( new B(this) ).print();，先通过 new B(this) 创建一个没有名字的对象，再调用它的方法。



声明为final的方法不能被重载。
声明为static的方法不能被重载，但是能够被再次声明。




这种借助于非面向对象技术的做法有时也会带来不便，比如引用类型数据均继承了 Object 类的特性，要转换为 String 类型（经常有这种需要）时只要简单调用 Object 类中定义的toString()即可，而基本数据类型转换为 String 类型则要麻烦得多。为解决此类问题 ，Java为每种基本数据类型分别设计了对应的类，称之为包装类(Wrapper Classes)，也有教材称为外覆类或数据类型类。

基本数据类型及对应的包装类
基本数据类型	对应的包装类
byte	Byte
short	Short
int	Integer
long	Long
char	Character
float	Float
double	Double
boolean	Boolean
每个包装类的对象可以封装一个相应的基本类型的数据，并提供了其它一些有用的方法。包装类对象一经创建，其内容（所封装的基本类型数据值）不可改变。

基本类型和对应的包装类可以相互装换：
由基本类型向对应的包装类转换称为装箱，例如把 int 包装成 Integer 类的对象；
包装类向对应的基本类型转换称为拆箱，例如把 Integer 类的对象重新简化为 int。



1) 实现 int 和 Integer 的相互转换
可以通过 Integer 类的构造方法将 int 装箱，通过 Integer 类的 intValue 方法将 Integer 拆箱。例如：
public class Demo {
    public static void main(String[] args) {
        int m = 500;
        Integer obj = new Integer(m);  // 手动装箱
        int n = obj.intValue();  // 手动拆箱


2) 将字符串转换为整数
Integer 类有一个静态的 paseInt() 方法，可以将字符串转换为整数，语法为：
parseInt(String s, int radix);
 int m = Integer.parseInt(str1, 10);




3) 将整数转换为字符串
Integer 类有一个静态的 toString() 方法，可以将整数转换为字符串。例如：
        int m = 500;
        String s = Integer.toString(m);




自动拆箱和装箱
 Integer obj = m;  // 自动装箱
        int n = obj;  // 自动拆箱


包不但可以包含类，还可以包含接口和其他的包。


如何实现包
通过 package 关键字可以声明一个包，例如：
    package p1.p2;
必须将 package 语句放在所有语句的前面，例如：
package p1.p2;
public class Test {
    public Test(){
        System.out.println("我是Test类的构造方法");
    }
}


包的调用
在Java中，调用其他包中的类共有两种方式。
1) 在每个类名前面加上完整的包名
java.util.Date today=new java.util.Date();

2) 通过 import 语句引入包中的类
import java.util.Date;
// 也可以引入 java.util 包中的所有类
// import java.util.*;




包的访问权限
被声明为 public 的类、方法或成员变量，可以被任何包下的任何类使用，而声明为 private 的类、方法或成员变量，只能被本类使用。
没有任何修饰符的类、方法和成员变量，只能被本包中的所有类访问，在包以外任何类都无法访问它。



当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则：
一个源文件中只能有一个public类。
一个源文件可以有多个非public类。
源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。
如果一个类定义在某个包中，那么package语句应该在源文件的首行。
如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。
import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。
类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在后续章节介绍。
除了上面提到的几种类型，Java还有一些特殊的类，如内部类、匿名类。 











